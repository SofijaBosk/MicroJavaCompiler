package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}



terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, EQUAL, RETURN, PLUS, COMMA, PRINT, VOID;
terminal Integer NUMBER;
terminal String IDENT;
terminal IF, ELSE;
terminal Integer NUM_CONST;
terminal Character CHAR_CONST;
terminal String BOOL_CONST;
terminal EQUALS, CONST;
terminal LSQUARE, RSQUARE;
terminal CLASS, EXTENDS;
terminal READ, CONTINUE, BREAK, WHILE;
terminal OR, AND, MINUS;
terminal NEW;
terminal DOT, BOOL_EQUAL, BOOL_NOT_EQUAL, GREATER, GREATER_OR_EQUAL, LESS, LESS_OR_EQUAL, DIV, MOD;
terminal INC, DEC;
terminal COLON, ASSIGN, FOREACH;
terminal NAMESPACE, STATIC, FOR, MUL;
terminal SCOPE;

nonterminal MethodDeclList MethodDeclList;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal FormPars FormPars;
nonterminal ActualPars ActualPars;
nonterminal ActualParamList ActualParamList; 
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal Addop Addop;
nonterminal Unmatched Unmatched;
nonterminal Matched Matched;

nonterminal Program Program;
nonterminal Designator Designator;
nonterminal MethodDecl MethodDecl;
nonterminal MethodTypeName MethodTypeName; 
nonterminal Type Type;
nonterminal Term Term;
nonterminal Expr Expr;
nonterminal Factor Factor;
nonterminal VarDeclList VarDeclList; 

nonterminal ProgDeclList ProgDeclList;
nonterminal NamespaceList NamespaceList;
nonterminal Namespace Namespace;
nonterminal ProgDecl ProgDecl;
nonterminal VarDecl VarDecl;
nonterminal ClassDecl ClassDecl;
nonterminal ConstDecl ConstDecl;
nonterminal ConstList ConstList;
nonterminal ConstSingle ConstSingle;
nonterminal VarlList VarlList;
nonterminal VarSingle VarSingle;
nonterminal ExtendsFrom ExtendsFrom;
nonterminal VarStaticDeclList VarStaticDeclList;
nonterminal StaticInitializerList StaticInitializerList;
nonterminal StaticInitializer StaticInitializer;
nonterminal MethodDeclListBrace MethodDeclListBrace;
nonterminal ClassDeclPom ClassDeclPom;
nonterminal StaticPom StaticPom;
nonterminal ReturnMethod ReturnMethod;
nonterminal DesignatorStatementHelper DesignatorStatementHelper;
nonterminal CondFactHelper CondFactHelper;
nonterminal DesignatorStatementList DesignatorStatementList;
nonterminal NumConstList NumConstList;
nonterminal Condition Condition;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal CondFact CondFact;
nonterminal DesignatorList DesignatorList;
nonterminal ActPars ActPars;
nonterminal CondTerm CondTerm;
nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal Mulop Mulop;
nonterminal ExprActParsChoice ExprActParsChoice;
nonterminal ActParsList ActParsList;
nonterminal ConstValue ConstValue;
nonterminal DesignatorHelper DesignatorHelper;
nonterminal DesignatorHelper2 DesignatorHelper2;
nonterminal DesignatorHelper3 DesignatorHelper3;
nonterminal Pom Pom;	
	
	            
/*Program_START*/
/*"program" ident {Namespace} {ConstDecl | VarDecl | ClassDecl } "{" {MethodDecl} "}"*/

Program ::= (Program) PROG IDENT:I1 NamespaceList:N2 ProgDeclList:P3 LBRACE MethodDeclList:M4 RBRACE {: RESULT=new Program(I1, N2, P3, M4); RESULT.setLine(I1left); :};

NamespaceList ::= (NamespaceList_Single) NamespaceList:N1 Namespace:N2 {: RESULT=new NamespaceList_Single(N1, N2); RESULT.setLine(N1left); :}
					|
					(NamespaceList_Multiple) Namespace:N1 {: RESULT=new NamespaceList_Multiple(N1); RESULT.setLine(N1left); :}
					;

ProgDeclList ::= (ProgDeclListObj) ProgDeclList:P1 ProgDecl:P2 {: RESULT=new ProgDeclListObj(P1, P2); RESULT.setLine(P1left); :}
				|
				(ProgDeclListNone) {: RESULT=new ProgDeclListNone(); :} /* epsilon */
				;

ProgDecl ::= (ProgConstDescarations) ConstDecl:C1 {: RESULT=new ProgConstDescarations(C1); RESULT.setLine(C1left); :}
				| 
				(ProgVarDescarations) VarDecl:V1 {: RESULT=new ProgVarDescarations(V1); RESULT.setLine(V1left); :}
				| 
				(ProgClassDescarations) ClassDecl:C1 {: RESULT=new ProgClassDescarations(C1); RESULT.setLine(C1left); :}
				;
				
/*Program_END*/	

/*Namespace_START*/
/*namespaceʺ ident ʺ{ʺ {ConstDecl | VarDecl | ClassDecl } ʺ{ʺ {MethodDecl} ʺ}ʺ ʺ}"*/

Namespace ::= (NamespaceProg) NAMESPACE IDENT:I1 LBRACE ProgDeclList:P2 LBRACE MethodDeclList:M3 RBRACE RBRACE {: RESULT=new NamespaceProg(I1, P2, M3); RESULT.setLine(I1left); :};
				
/*Namespace_END*/	


/*ConstDecl_START*/
/*"const" Type ident"="(numConst | charConst | boolConst) {, ident "=" (numConst |
charConst | boolConst)} ";" */

ConstDecl ::= (ConstDecl) CONST Type:T1 ConstList:C2 SEMI {: RESULT=new ConstDecl(T1, C2); RESULT.setLine(T1left); :};

ConstList ::= (SingleConstDecl) ConstSingle:C1 {: RESULT=new SingleConstDecl(C1); RESULT.setLine(C1left); :}
			|
			(MultipleConstDecl) ConstList:C1 COMMA ConstSingle:C2 {: RESULT=new MultipleConstDecl(C1, C2); RESULT.setLine(C1left); :}
			;
			
ConstSingle ::= (BooleanConst) IDENT:booleanConstName EQUALS BOOL_CONST:booleanConstValue {: RESULT=new BooleanConst(booleanConstName, booleanConstValue); RESULT.setLine(booleanConstNameleft); :}
			|
			(IntegerConst) IDENT:intConstName EQUALS NUM_CONST:intConstValue {: RESULT=new IntegerConst(intConstName, intConstValue); RESULT.setLine(intConstNameleft); :}
			|
			(CharacterConst) IDENT:charConstName EQUALS CHAR_CONST:charConstValue {: RESULT=new CharacterConst(charConstName, charConstValue); RESULT.setLine(charConstNameleft); :}
			;

/*ConstDecl_END*/

/*Type_START*/

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

/*Type_END*/

/*VarDecl_START*/
/*Type ident ["[" "]"] {"," ident ["[" "]"]} ";".*/

VarDecl ::= (VarDecl) Type:varType VarlList:V1 SEMI {: RESULT=new VarDecl(varType, V1); RESULT.setLine(varTypeleft); :};

VarlList ::= (SingleVarDecl) VarSingle:V1 {: RESULT=new SingleVarDecl(V1); RESULT.setLine(V1left); :}
			|
			(MultipleVarDecl) VarlList:V1 COMMA VarSingle:V2 {: RESULT=new MultipleVarDecl(V1, V2); RESULT.setLine(V1left); :}
             ;
             
VarSingle ::= (VarDecl_ID) IDENT:I1 {: RESULT=new VarDecl_ID(I1); RESULT.setLine(I1left); :}
              |
              (VarDecl_SQ) IDENT:I1 LSQUARE RSQUARE {: RESULT=new VarDecl_SQ(I1); RESULT.setLine(I1left); :}
              ;

/*VarDecl_END*/


/*ClassDecl_START*/
/*ʺclassʺ ident [ʺextendsʺ Type] ʺ{ʺ {ʺstaticʺ VarDecl} {StaticInitializer} {VarDecl} 
[ʺ{ʺ {MethodDecl} ʺ}ʺ] ʺ}ʺ.*/

ClassDecl ::= (ClassDecl_NoMeth) ClassDeclPom:C1 RBRACE {: RESULT=new ClassDecl_NoMeth(C1); RESULT.setLine(C1left); :}
				|
				(ClassDecl_Meth) ClassDeclPom:C1 LBRACE MethodDeclList:M2 RBRACE RBRACE {: RESULT=new ClassDecl_Meth(C1, M2); RESULT.setLine(C1left); :}
				;
 
ClassDeclPom ::= (ClassDeclPom_NoMeth) CLASS IDENT:I1 ExtendsFrom:E2 LBRACE StaticPom:S3 VarDeclList:V4 {: RESULT=new ClassDeclPom_NoMeth(I1, E2, S3, V4); RESULT.setLine(I1left); :};
/*
MethodDeclListBrace ::= (MethodDeclListBrace_Meth) LBRACE MethodDeclList RBRACE;
*/

StaticPom ::= (StaticPom_VarDecl) StaticPom:S1 STATIC VarDecl:V2 {: RESULT=new StaticPom_VarDecl(S1, V2); RESULT.setLine(S1left); :}
		|
		(StaticPom_StaticInitializer) StaticPom:S1 STATIC StaticInitializer:S2 {: RESULT=new StaticPom_StaticInitializer(S1, S2); RESULT.setLine(S1left); :}
		|
		(StaticPom_None) {: RESULT=new StaticPom_None(); :} /* epsilon */
		;

ExtendsFrom ::= (ExtendsFrom_Meth) EXTENDS Type:T1 {: RESULT=new ExtendsFrom_Meth(T1); RESULT.setLine(T1left); :}
                |
                (ExtendsFrom_None) {: RESULT=new ExtendsFrom_None(); :} /* epsilon */
                ;
                
StaticInitializerList ::= (StaticInitializerList_Single) {: RESULT=new StaticInitializerList_Single(); :} /* epsilon */
						|
						(StaticInitializerList_Multiple) StaticInitializerList:S1 StaticInitializer:S2 {: RESULT=new StaticInitializerList_Multiple(S1, S2); RESULT.setLine(S1left); :}
						;

VarStaticDeclList ::= (VarStaticDeclarations) VarStaticDeclList:V1 STATIC VarDecl:V2 {: RESULT=new VarStaticDeclarations(V1, V2); RESULT.setLine(V1left); :}
				|
				(NoStaticVarDecl) {: RESULT=new NoStaticVarDecl(); :}/* epsilon */ 
	    	    ; 

VarDeclList ::= (VarDeclarations) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclarations(V1, V2); RESULT.setLine(V1left); :}
				|
				(NoVarDecl) {: RESULT=new NoVarDecl(); :}/* epsilon */ 
	    	    ; 
	    	    
/*ClassDecl_END*/

/*StaticInitializer_START*/
/* ʺstaticʺ ʺ{ʺ {Statement} ʺ}ʺ */

StaticInitializer ::= (StaticInitializer) STATIC LBRACE StatementList:S1 RBRACE {: RESULT=new StaticInitializer(S1); RESULT.setLine(S1left); :};

/*StaticInitializer_END*/

/*MethodDecl_START*/
/*(Type | "void") ident "(" [FormPars] ")" {VarDecl} "{" {Statement} "}"*/

MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
				|
				(NoMethodDecl) {: RESULT=new NoMethodDecl(); :} /* epsilon */
				;
				
MethodDecl ::= (MethodDecl) ReturnMethod:R1 IDENT:methName LPAREN FormPars:F2 RPAREN VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDecl(R1, methName, F2, V3, S4); RESULT.setLine(R1left); :};

ReturnMethod ::= (ReturnMethod_Type) Type:T1 {: RESULT=new ReturnMethod_Type(T1); RESULT.setLine(T1left); :}
				|
				(ReturnMethod_Void) VOID {: RESULT=new ReturnMethod_Void(); :}
				;

/*MethodDecl_END*/

/*FormPars_START*/
/*Type ident ["[" "]"] {"," Type ident ["[" "]"]}*/	
			
FormPars ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :}
		  |
		  (NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */
		  ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
				|
				(SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
				;
				
FormalParamDecl ::= (FormParDecl_Single) Type:T1 IDENT:I2 {: RESULT=new FormParDecl_Single(T1, I2); RESULT.setLine(T1left); :}
                |
                (FormParDecl_Array) Type:T1 IDENT:I2 LSQUARE RSQUARE {: RESULT=new FormParDecl_Array(T1, I2); RESULT.setLine(T1left); :}
                ;				

/*FormPars_END*/


/*Statement_START*/
/*
DesignatorStatement ʺ;ʺ
| ʺifʺ ʺ(ʺ Condition ʺ)ʺ Statement [ʺelseʺ Statement]
| ʺbreakʺ ʺ;ʺ
| ʺcontinueʺ ʺ;ʺ
| ʺreturnʺ [Expr] ʺ;ʺ
| ʺreadʺ ʺ(ʺ Designator ʺ)ʺ ʺ;ʺ
| ʺprintʺ ʺ(ʺ Expr [ʺ,ʺ numConst] ʺ)ʺ ʺ;ʺ
| ʺforʺ ʺ{ʺ [DesignatorStatement {ʺ,ʺ DesignatorStatement}] ʺ;ʺ [CondFact] ʺ;ʺ [DesignatorStatement {ʺ,ʺ DesignatorStatement}] ʺ}ʺ * za B i C nivo
| ʺ{ʺ {Statement} ʺ}ʺ
*/

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				;
				
				  
Statement ::= (MatchedStmt) Matched:M1 {: RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); :}
		   |
		   (UnmatchedStmt) Unmatched:U1 {: RESULT=new UnmatchedStmt(U1); RESULT.setLine(U1left); :}
		   ; 

Unmatched ::= (UnmatchedIf) IF Condition:C1 Statement:S2 {: RESULT=new UnmatchedIf(C1, S2); RESULT.setLine(C1left); :}
		 	|
		 	(UnmatchedIfElse) IF Condition:C1 Matched:M2 ELSE Unmatched:U3 {: RESULT=new UnmatchedIfElse(C1, M2, U3); RESULT.setLine(C1left); :}
		 	;
		 

Matched ::= (DesignatorStatementStmt) DesignatorStatement:dest SEMI {: RESULT=new DesignatorStatementStmt(dest); RESULT.setLine(destleft); :}
		   |
		   (ErrorStmt) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorStmt(); :}
		   |
		   (PrintStmt) PRINT LPAREN Expr:E1 NumConstList:N2 RPAREN SEMI {: RESULT=new PrintStmt(E1, N2); RESULT.setLine(E1left); :}
		   |
		   (ReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
		   |
		   (ReturnExpr) RETURN Expr:t SEMI {: RESULT=new ReturnExpr(t); RESULT.setLine(tleft); :}
		   |
		   (ReturnNoExpr) RETURN SEMI {: RESULT=new ReturnNoExpr(); :}
		   |
		   (ContinueStmt) CONTINUE SEMI {: RESULT=new ContinueStmt(); :}
		   |
		   (BreakStmt) BREAK SEMI {: RESULT=new BreakStmt(); :}
		   |
		   (StatementList_List) LBRACE StatementList:S1 RBRACE {: RESULT=new StatementList_List(S1); RESULT.setLine(S1left); :}
	     	|
		   (FORStmt_NoDS) FOR LBRACE DesignatorStatementHelper:D1 SEMI CondFactHelper:C2 SEMI DesignatorStatementHelper:D3 RBRACE {: RESULT=new FORStmt_NoDS(D1, C2, D3); RESULT.setLine(D1left); :}	   
		   |
		   (MatchedStatement) IF Condition:C1 Matched:M2 ELSE Matched:M3 {: RESULT=new MatchedStatement(C1, M2, M3); RESULT.setLine(C1left); :}
		   ;
		   
DesignatorStatementHelper ::= (DesignatorStatementHelper_DS) DesignatorStatement:D1 DesignatorStatementList:D2 {: RESULT=new DesignatorStatementHelper_DS(D1, D2); RESULT.setLine(D1left); :}
		   					|
		   					(DesignatorStatementHelper_NoDS) {: RESULT=new DesignatorStatementHelper_NoDS(); :} /**/
		   					;
		   					
CondFactHelper ::= (CondFactHelper_One) CondFact:C1 {: RESULT=new CondFactHelper_One(C1); RESULT.setLine(C1left); :}
		   					|
		   					(CondFactHelper_none) {: RESULT=new CondFactHelper_none(); :} /**/
		   					;	   					
		   					
NumConstList ::= (NumConstList_ARGS) COMMA NUM_CONST:N1 {: RESULT=new NumConstList_ARGS(N1); RESULT.setLine(N1left); :}
				|
				(NumConstList_None) {: RESULT=new NumConstList_None(); :} /*epsilon*/
				;		
					  
DesignatorStatementList ::= (DesignatorStatementList_List) DesignatorStatementList:D1 DesignatorStatement:D2 {: RESULT=new DesignatorStatementList_List(D1, D2); RESULT.setLine(D1left); :}
							|
							(DesignatorStatementList_Single) {: RESULT=new DesignatorStatementList_Single(); :} /* epsilon */
							;

/*Statement_END*/


/*DesignatorStatement_START*/
/*
Designator (Assignop Expr | ʺ(ʺ [ActPars] ʺ)ʺ | ʺ++ʺ | ʺ‐‐ʺ) |
ʺ[ʺ {[Designator] ʺ,ʺ} ʺ*ʺDesignator ʺ]ʺ ʺ=ʺ Designator
*/


DesignatorStatement ::= (DesignatorStatement_Expr) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DesignatorStatement_Expr(D1, A2, E3); RESULT.setLine(D1left); :}
					| 
					(DesignatorStatement_INC) Designator:D1 INC {: RESULT=new DesignatorStatement_INC(D1); RESULT.setLine(D1left); :}
					| 
					(DesignatorStatement_DEC) Designator:D1 DEC {: RESULT=new DesignatorStatement_DEC(D1); RESULT.setLine(D1left); :}
					| 
					(DesignatorStatement_ActPars) Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new DesignatorStatement_ActPars(D1, A2); RESULT.setLine(D1left); :}
					| 
					(DesignatorStatement_NoActPars) Designator:D1 LPAREN RPAREN {: RESULT=new DesignatorStatement_NoActPars(D1); RESULT.setLine(D1left); :}
					|
                    (DesignatorStatement_Mul) FOR LSQUARE Designator:D1 MUL Designator:D2 RSQUARE EQUALS Designator:D3 {: RESULT=new DesignatorStatement_Mul(D1, D2, D3); RESULT.setLine(D1left); :}               
                   	|                  	
					(DesigatorStatementError) error SEMI:l
					{: parser.report_error("Designator statement error recovering. " + lleft, null); :} {: RESULT=new DesigatorStatementError(); :}
					;

DesignatorList ::= (DesignatorList_List) Designator:D1 COMMA DesignatorList:D2 {: RESULT=new DesignatorList_List(D1, D2); RESULT.setLine(D1left); :}
	              |
	              (DesignatorList_Single) {: RESULT=new DesignatorList_Single(); :} /**/
	              ;
	              					
/*DesignatorStatement_END*/

/*ActPars_START*/
/*Expr {"," Expr}*/

ActPars ::=  (ActPars_Single) Expr:E1 {: RESULT=new ActPars_Single(E1); RESULT.setLine(E1left); :}
			|
			(ActPars_List) ActPars:A1 COMMA Expr:E2 {: RESULT=new ActPars_List(A1, E2); RESULT.setLine(A1left); :}
            ;

/*ActPars_END*/

/*Condition_START*/
/*CondTerm {"||" CondTerm}*/

Condition ::= (Condition_List) Condition:C1 OR CondTerm:C2 {: RESULT=new Condition_List(C1, C2); RESULT.setLine(C1left); :}
              |
              (Condition_Single) CondTerm:C1 {: RESULT=new Condition_Single(C1); RESULT.setLine(C1left); :}
              ;

/*Condition_END*/

/*CondTerm_START*/
/*CondFact {"&&" CondFact}*/

CondTerm ::= (CondTerm_Chain) CondTerm:C1 AND CondFact:C2 {: RESULT=new CondTerm_Chain(C1, C2); RESULT.setLine(C1left); :}
             |
             (CondTerm_Item) CondFact:C1 {: RESULT=new CondTerm_Item(C1); RESULT.setLine(C1left); :}
             ;

/*CondTerm_END*/
	
/*CondFact_START*/	
/*Expr [Relop Expr]*/

CondFact ::= (CondFact_Expr) Expr:E1 {: RESULT=new CondFact_Expr(E1); RESULT.setLine(E1left); :}
             |
             (CondFact_Relop) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFact_Relop(E1, R2, E3); RESULT.setLine(E1left); :}
             ;
            
/*CondFact_END*/
	
/*Expr_START*/	
/* ["-"] Term {Addop Term} */

Expr ::= (AddExpr) Expr:E1 Addop:A2 Term:T3 {: RESULT=new AddExpr(E1, A2, T3); RESULT.setLine(E1left); :}
 		 |
		 (TermExpr_Minus) MINUS Term:T1 {: RESULT=new TermExpr_Minus(T1); RESULT.setLine(T1left); :}
		 |
		 (TermExpr) Term:T1 {: RESULT=new TermExpr(T1); RESULT.setLine(T1left); :}
		 ;
 
/*Expr_END*/	
	
/*Term_START*/	
/* Factor {Mulop Factor} */

Term ::= (Term_Factor) Factor:F1 {: RESULT=new Term_Factor(F1); RESULT.setLine(F1left); :}
         |
         (Term_Mulop) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new Term_Mulop(T1, M2, F3); RESULT.setLine(T1left); :}
         ;
 
/*Term_END*/		  

/*Factor_START*/
/*
Designator ["(" [ActPars] ")"]
| numConst
| charConst
| boolConst
| "new" Type ( "[" Expr "]" | "(" [ActPars] ")" )
| "(" Expr ")".
*/

Factor ::= (DesignatorFactoraaaa) Designator:d {: RESULT=new DesignatorFactoraaaa(d); RESULT.setLine(dleft); :}
           |
           (DesignatorFactorActPars) Designator:D1 LPAREN ActParsList:A2 RPAREN {: RESULT=new DesignatorFactorActPars(D1, A2); RESULT.setLine(D1left); :}
           |
           (ConstValueFactor) ConstValue:C1 {: RESULT=new ConstValueFactor(C1); RESULT.setLine(C1left); :}
           |
           (NewFactor) NEW Type:T1 LPAREN ExprActParsChoice:E2 RPAREN {: RESULT=new NewFactor(T1, E2); RESULT.setLine(T1left); :}
           |
           (ParenExprFactor) LPAREN Expr:E1 RPAREN {: RESULT=new ParenExprFactor(E1); RESULT.setLine(E1left); :}
           ;
           
ExprActParsChoice ::= (ExprActParsChoice_Expr) LSQUARE Expr:E1 RSQUARE {: RESULT=new ExprActParsChoice_Expr(E1); RESULT.setLine(E1left); :}
 						|
 						(ExprActParsChoice_ActPars) LPAREN ActParsList:A1 RPAREN {: RESULT=new ExprActParsChoice_ActPars(A1); RESULT.setLine(A1left); :}
           				;
           				
ActParsList ::= (ActParsList_Single) ActPars:A1 {: RESULT=new ActParsList_Single(A1); RESULT.setLine(A1left); :}
				|
				(ActParsList_None) {: RESULT=new ActParsList_None(); :} /*epsilon*/
           		;
           		
ConstValue ::= (ConstValue_Num) NUM_CONST:N1 {: RESULT=new ConstValue_Num(N1); RESULT.setLine(N1left); :}
				|
	            (ConstValue_Char) CHAR_CONST:C1 {: RESULT=new ConstValue_Char(C1); RESULT.setLine(C1left); :}
	            |
	            (ConstValue_Bool) BOOL_CONST:B1 {: RESULT=new ConstValue_Bool(B1); RESULT.setLine(B1left); :}
	            ;
	            
/*Factor_END*/


/*Designator_START*/
/* [ident ʺ::ʺ] ident {"." ident | "[" Expr "]"}*/


Designator ::= (Designator_Ident) DesignatorHelper:D1 DesignatorHelper2:D2 {: RESULT=new Designator_Ident(D1, D2); RESULT.setLine(D1left); :};


DesignatorHelper ::= (DesignatorHelper_Scope) IDENT:I1 SCOPE IDENT:I2 {: RESULT=new DesignatorHelper_Scope(I1, I2); RESULT.setLine(I1left); :}
				|
				(DesignatorHelper_None) IDENT:I1 {: RESULT=new DesignatorHelper_None(I1); RESULT.setLine(I1left); :}
                ;

DesignatorHelper2 ::= (DesignatorHelper_Dot) DesignatorHelper2:D1 DOT IDENT:I2 {: RESULT=new DesignatorHelper_Dot(D1, I2); RESULT.setLine(D1left); :}
		|
		(DesignatorHelper_Expr) DesignatorHelper2:D1 LSQUARE Expr:E2 RSQUARE {: RESULT=new DesignatorHelper_Expr(D1, E2); RESULT.setLine(D1left); :}
		|
		(DesignatorHelper_NoneExpr) {: RESULT=new DesignatorHelper_NoneExpr(); :} /**/
		;
  

 /*               
DesignatorHelper2 ::= (DesignatorHelper_Ident) DesignatorHelper2 DOT IDENT
;
*/
                
/*Designator_END*/


/*Operators_START*/	
		
Assignop ::= EQUALS {: RESULT=new AssignopDerived1(); :};	

Relop ::= (Relop_EQ) BOOL_EQUAL {: RESULT=new Relop_EQ(); :}
          |
          (Relop_NEQ) BOOL_NOT_EQUAL {: RESULT=new Relop_NEQ(); :}
          |
          (Relop_GRE) GREATER {: RESULT=new Relop_GRE(); :}
          |
          (Relop_GEQ) GREATER_OR_EQUAL {: RESULT=new Relop_GEQ(); :}
          |
          (Relop_LES) LESS {: RESULT=new Relop_LES(); :}
          |
          (Relop_LEQ) LESS_OR_EQUAL {: RESULT=new Relop_LEQ(); :}
          ;
		
Addop ::= (Addop_PLUS) PLUS {: RESULT=new Addop_PLUS(); :}
		  |
	      (Addop_MINUS) MINUS {: RESULT=new Addop_MINUS(); :}
	      ;
	
Mulop ::= (Mulop_MUL) MUL {: RESULT=new Mulop_MUL(); :}
          |
          (Mulop_DIV) DIV {: RESULT=new Mulop_DIV(); :}
          |
          (Mulop_MOD) MOD {: RESULT=new Mulop_MOD(); :}
          ;

/*Operators_END*/	

