package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}



terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, EQUAL, RETURN, PLUS, COMMA, PRINT, VOID;
terminal Integer NUMBER;
terminal String IDENT;
terminal IF, ELSE;
terminal Integer NUM_CONST;
terminal Character CHAR_CONST;
terminal String BOOL_CONST;
terminal EQUALS, CONST;
terminal LSQUARE, RSQUARE;
terminal CLASS, EXTENDS;
terminal READ, CONTINUE, BREAK, WHILE;
terminal OR, AND, MINUS;
terminal NEW;
terminal DOT, BOOL_EQUAL, BOOL_NOT_EQUAL, GREATER, GREATER_OR_EQUAL, LESS, LESS_OR_EQUAL, MUL, DIV, MOD;
terminal INC, DEC;
terminal COLON, ASSIGN, FOREACH;
terminal NAMESPACE, STATIC;


nonterminal MethodDeclList;
nonterminal FormalParamList, FormalParamDecl, FormPars, ActualPars, ActualParamList; 
nonterminal StatementList, Statement, Addop;
nonterminal Unmatched, Matched;

nonterminal Program, Designator, MethodDecl, MethodTypeName; 
nonterminal Type, Term, Expr, Factor, VarDeclList; 

nonterminal ProgDeclList, NamespaceList, Namespace;
nonterminal ProgDecl, VarDecl, ClassDecl, ConstDecl;
nonterminal ConstList, ConstSingle;
nonterminal VarlList, VarSingle;
nonterminal ExtendsFrom, VarStaticDeclList, StaticInitializerList, StaticInitializer, MethodDeclListBrace, ClassDeclPom;
nonterminal StaticPom;

/*Program_START*/
/*"program" ident {Namespace} {ConstDecl | VarDecl | ClassDecl } "{" {MethodDecl} "}"*/

Program ::= (Program) PROG IDENT NamespaceList ProgDeclList LBRACE MethodDeclList RBRACE;

NamespaceList ::= (NamespaceList_Single) NamespaceList Namespace
					|
					(NamespaceList_Multiple) Namespace
					;

ProgDeclList ::= (ProgDeclListObj) ProgDeclList ProgDecl
				|
				(ProgDeclListNone) /* epsilon */
				;

ProgDecl ::= (ProgConstDescarations) ConstDecl
				| 
				(ProgVarDescarations) VarDecl
				| 
				(ProgClassDescarations) ClassDecl
				;
				
/*Program_END*/	

/*Namespace_START*/
/*namespaceʺ ident ʺ{ʺ {ConstDecl | VarDecl | ClassDecl } ʺ{ʺ {MethodDecl} ʺ}ʺ ʺ}"*/

Namespace ::= (NamespaceProg) NAMESPACE IDENT LBRACE ProgDeclList LBRACE MethodDeclList RBRACE RBRACE;
				
/*Namespace_END*/	


/*ConstDecl_START*/
/*"const" Type ident"="(numConst | charConst | boolConst) {, ident "=" (numConst |
charConst | boolConst)} ";" */

ConstDecl ::= (ConstDecl) CONST Type ConstList SEMI;

ConstList ::= (SingleConstDecl) ConstSingle
			|
			(MultipleConstDecl) ConstList COMMA ConstSingle
			;
			
ConstSingle ::= (BooleanConst) IDENT:booleanConstName EQUALS BOOL_CONST:booleanConstValue
			|
			(IntegerConst) IDENT:intConstName EQUALS NUM_CONST:intConstValue
			|
			(CharacterConst) IDENT:charConstName EQUALS CHAR_CONST:charConstValue
			;

/*ConstDecl_END*/

/*Type_START*/

Type ::= (Type) IDENT:typeName;

/*Type_END*/

/*VarDecl_START*/
/*Type ident ["[" "]"] {"," ident ["[" "]"]} ";".*/

VarDecl ::= (VarDecl) Type:varType VarlList SEMI;

VarlList ::= (SingleVarDecl) VarSingle
			|
			(MultipleVarDecl) VarlList COMMA VarSingle
             ;
             
VarSingle ::= (VarDecl_ID) IDENT
              |
              (VarDecl_SQ) IDENT LSQUARE RSQUARE
              ;

/*VarDecl_END*/


/*ClassDecl_START*/
/*ʺclassʺ ident [ʺextendsʺ Type] ʺ{ʺ {ʺstaticʺ VarDecl} {StaticInitializer} {VarDecl} 
[ʺ{ʺ {MethodDecl} ʺ}ʺ] ʺ}ʺ.*/

ClassDecl ::= (ClassDecl_NoMeth) ClassDeclPom RBRACE
				|
				(ClassDecl_Meth) ClassDeclPom LBRACE MethodDeclList RBRACE RBRACE
				;
 
ClassDeclPom ::= (ClassDeclPom_NoMeth) CLASS IDENT ExtendsFrom LBRACE StaticPom VarDeclList;
/*
MethodDeclListBrace ::= (MethodDeclListBrace_Meth) LBRACE MethodDeclList RBRACE;
*/

StaticPom ::= (StaticPom_VarDecl) StaticPom STATIC VarDecl
		|
		(StaticPom_StaticInitializer) StaticPom STATIC StaticInitializer
		|
		(StaticPom_None) /* epsilon */
		;

ExtendsFrom ::= (ExtendsFrom_Meth) EXTENDS Type
                |
                (ExtendsFrom_None) /* epsilon */
                ;
                
StaticInitializerList ::= (StaticInitializerList_Single) /* epsilon */
						|
						(StaticInitializerList_Multiple) StaticInitializerList StaticInitializer
						;

VarStaticDeclList ::= (VarStaticDeclarations) VarStaticDeclList STATIC VarDecl
				|
				(NoStaticVarDecl)/* epsilon */ 
	    	    ; 

VarDeclList ::= (VarDeclarations) VarDeclList VarDecl
				|
				(NoVarDecl)/* epsilon */ 
	    	    ; 
	    	    
/*ClassDecl_END*/

/*StaticInitializer_START*/
/* ʺstaticʺ ʺ{ʺ {Statement} ʺ}ʺ */

StaticInitializer ::= (StaticInitializer) STATIC LBRACE StatementList RBRACE;

/*StaticInitializer_END*/

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
					|
					(NoMethodDecl)/* epsilon */
					;

MethodDecl ::= (MethodDecl) MethodTypeName
			   LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE 
			   ;

MethodTypeName ::= (MethodTypeName) Type:retType IDENT:methName
;

FormPars ::= (FormParams) FormalParamList | (NoFormParam) /* epsilon */ ;

FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
					|
					(SingleFormalParamDecl) FormalParamDecl
					;
					
FormalParamDecl ::= (FormalParamDecl) Type IDENT ;

StatementList ::= (Statements) StatementList Statement 
					|
				  (NoStmt) /* epsilon */
				  ;

Statement ::= (MatchedStmt) Matched | (UnmachedStmt) Unmatched ;

Unmatched ::= (UnmatchedIf) IF Expr Statement | (UnmatchedIfElse) IF Expr Matched ELSE Unmatched;
	
				  
Matched ::= (Assignment) Designator:dest EQUAL Expr:e SEMI 
			  |
			  (ErrAssignment) Designator EQUAL error SEMI
			  {: parser.log.debug("Uspesan oporavak od greske pri dodeli vrednosti."); :}
			  |
			  (PrintStmt) PRINT LPAREN Expr RPAREN SEMI 
			  |
			  (ReturnExpr) RETURN Expr:t SEMI
			  |
			  (ReturnNoExpr) RETURN SEMI
			  | 
			  (MatchedIf) IF Expr Matched ELSE Matched
			  |
			  (ProcCall) Designator:func LPAREN ActualPars RPAREN SEMI
			  ;
			  
Expr ::= (AddExpr) Expr:te Addop Term:t
		 |
		 (TermExpr) Term:t
		 ;

Term ::= (Term) Factor:t 
;

Factor ::= (Const) NUMBER
			|
		   (Var) Designator:d
		    |
		   (FuncCall) Designator:func LPAREN ActualPars RPAREN
		   ;

ActualPars ::= (Actuals) ActualParamList 
				| 
			   (NoActuals) /* epsilon */ 
			   ;
			   
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
					|
					(ActualParam) Expr
					;

Designator ::= (Designator) IDENT:name
;

Addop ::= (Addop) PLUS ;
