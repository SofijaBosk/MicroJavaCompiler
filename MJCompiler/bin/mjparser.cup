package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}



terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, EQUAL, RETURN, PLUS, COMMA, PRINT, VOID;
terminal Integer NUMBER;
terminal String IDENT;
terminal IF, ELSE;
terminal Integer NUM_CONST;
terminal Character CHAR_CONST;
terminal String BOOL_CONST;
terminal EQUALS, CONST;
terminal LSQUARE, RSQUARE;
terminal CLASS, EXTENDS;
terminal READ, CONTINUE, BREAK, WHILE;
terminal OR, AND, MINUS;
terminal NEW;
terminal DOT, BOOL_EQUAL, BOOL_NOT_EQUAL, GREATER, GREATER_OR_EQUAL, LESS, LESS_OR_EQUAL, MUL, DIV, MOD;
terminal INC, DEC;
terminal COLON, ASSIGN, FOREACH;
terminal NAMESPACE, STATIC, FOR;


nonterminal MethodDeclList;
nonterminal FormalParamList, FormalParamDecl, FormPars, ActualPars, ActualParamList; 
nonterminal StatementList, Statement, Addop;
nonterminal Unmatched, Matched;

nonterminal Program, Designator, MethodDecl, MethodTypeName; 
nonterminal Type, Term, Expr, Factor, VarDeclList; 

nonterminal ProgDeclList, NamespaceList, Namespace;
nonterminal ProgDecl, VarDecl, ClassDecl, ConstDecl;
nonterminal ConstList, ConstSingle;
nonterminal VarlList, VarSingle;
nonterminal ExtendsFrom, VarStaticDeclList, StaticInitializerList, StaticInitializer, MethodDeclListBrace, ClassDeclPom;
nonterminal StaticPom;
nonterminal ReturnMethod;
nonterminal DesignatorStatementHelper, CondFactHelper, DesignatorStatementList, NumConstList, Condition, DesignatorStatement, CondFact;

/*Program_START*/
/*"program" ident {Namespace} {ConstDecl | VarDecl | ClassDecl } "{" {MethodDecl} "}"*/

Program ::= (Program) PROG IDENT NamespaceList ProgDeclList LBRACE MethodDeclList RBRACE;

NamespaceList ::= (NamespaceList_Single) NamespaceList Namespace
					|
					(NamespaceList_Multiple) Namespace
					;

ProgDeclList ::= (ProgDeclListObj) ProgDeclList ProgDecl
				|
				(ProgDeclListNone) /* epsilon */
				;

ProgDecl ::= (ProgConstDescarations) ConstDecl
				| 
				(ProgVarDescarations) VarDecl
				| 
				(ProgClassDescarations) ClassDecl
				;
				
/*Program_END*/	

/*Namespace_START*/
/*namespaceʺ ident ʺ{ʺ {ConstDecl | VarDecl | ClassDecl } ʺ{ʺ {MethodDecl} ʺ}ʺ ʺ}"*/

Namespace ::= (NamespaceProg) NAMESPACE IDENT LBRACE ProgDeclList LBRACE MethodDeclList RBRACE RBRACE;
				
/*Namespace_END*/	


/*ConstDecl_START*/
/*"const" Type ident"="(numConst | charConst | boolConst) {, ident "=" (numConst |
charConst | boolConst)} ";" */

ConstDecl ::= (ConstDecl) CONST Type ConstList SEMI;

ConstList ::= (SingleConstDecl) ConstSingle
			|
			(MultipleConstDecl) ConstList COMMA ConstSingle
			;
			
ConstSingle ::= (BooleanConst) IDENT:booleanConstName EQUALS BOOL_CONST:booleanConstValue
			|
			(IntegerConst) IDENT:intConstName EQUALS NUM_CONST:intConstValue
			|
			(CharacterConst) IDENT:charConstName EQUALS CHAR_CONST:charConstValue
			;

/*ConstDecl_END*/

/*Type_START*/

Type ::= (Type) IDENT:typeName;

/*Type_END*/

/*VarDecl_START*/
/*Type ident ["[" "]"] {"," ident ["[" "]"]} ";".*/

VarDecl ::= (VarDecl) Type:varType VarlList SEMI;

VarlList ::= (SingleVarDecl) VarSingle
			|
			(MultipleVarDecl) VarlList COMMA VarSingle
             ;
             
VarSingle ::= (VarDecl_ID) IDENT
              |
              (VarDecl_SQ) IDENT LSQUARE RSQUARE
              ;

/*VarDecl_END*/


/*ClassDecl_START*/
/*ʺclassʺ ident [ʺextendsʺ Type] ʺ{ʺ {ʺstaticʺ VarDecl} {StaticInitializer} {VarDecl} 
[ʺ{ʺ {MethodDecl} ʺ}ʺ] ʺ}ʺ.*/

ClassDecl ::= (ClassDecl_NoMeth) ClassDeclPom RBRACE
				|
				(ClassDecl_Meth) ClassDeclPom LBRACE MethodDeclList RBRACE RBRACE
				;
 
ClassDeclPom ::= (ClassDeclPom_NoMeth) CLASS IDENT ExtendsFrom LBRACE StaticPom VarDeclList;
/*
MethodDeclListBrace ::= (MethodDeclListBrace_Meth) LBRACE MethodDeclList RBRACE;
*/

StaticPom ::= (StaticPom_VarDecl) StaticPom STATIC VarDecl
		|
		(StaticPom_StaticInitializer) StaticPom STATIC StaticInitializer
		|
		(StaticPom_None) /* epsilon */
		;

ExtendsFrom ::= (ExtendsFrom_Meth) EXTENDS Type
                |
                (ExtendsFrom_None) /* epsilon */
                ;
                
StaticInitializerList ::= (StaticInitializerList_Single) /* epsilon */
						|
						(StaticInitializerList_Multiple) StaticInitializerList StaticInitializer
						;

VarStaticDeclList ::= (VarStaticDeclarations) VarStaticDeclList STATIC VarDecl
				|
				(NoStaticVarDecl)/* epsilon */ 
	    	    ; 

VarDeclList ::= (VarDeclarations) VarDeclList VarDecl
				|
				(NoVarDecl)/* epsilon */ 
	    	    ; 
	    	    
/*ClassDecl_END*/

/*StaticInitializer_START*/
/* ʺstaticʺ ʺ{ʺ {Statement} ʺ}ʺ */

StaticInitializer ::= (StaticInitializer) STATIC LBRACE StatementList RBRACE;

/*StaticInitializer_END*/

/*MethodDecl_START*/
/*(Type | "void") ident "(" [FormPars] ")" {VarDecl} "{" {Statement} "}"*/

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon */
				;
				
MethodDecl ::= (MethodDecl) ReturnMethod IDENT:methName LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE;

ReturnMethod ::= (ReturnMethod_Type) Type
				|
				(ReturnMethod_Void) VOID
				;

/*MethodDecl_END*/

/*FormPars_START*/
/*Type ident ["[" "]"] {"," Type ident ["[" "]"]}*/	
			
FormPars ::= (FormParams) FormalParamList
		  |
		  (NoFormParam) /* epsilon */
		  ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
				|
				(SingleFormalParamDecl) FormalParamDecl
				;
				
FormalParamDecl ::= (FormParDecl_Single) Type IDENT
                |
                (FormParDecl_Array) Type IDENT LSQUARE RSQUARE
                ;				

/*FormPars_END*/


/*Statement_START*/
/*
DesignatorStatement ʺ;ʺ
| ʺifʺ ʺ(ʺ Condition ʺ)ʺ Statement [ʺelseʺ Statement]
| ʺbreakʺ ʺ;ʺ
| ʺcontinueʺ ʺ;ʺ
| ʺreturnʺ [Expr] ʺ;ʺ
| ʺreadʺ ʺ(ʺ Designator ʺ)ʺ ʺ;ʺ
| ʺprintʺ ʺ(ʺ Expr [ʺ,ʺ numConst] ʺ)ʺ ʺ;ʺ
| ʺforʺ ʺ{ʺ [DesignatorStatement {ʺ,ʺ DesignatorStatement}] ʺ;ʺ [CondFact] ʺ;ʺ [DesignatorStatement {ʺ,ʺ DesignatorStatement}] ʺ}ʺ * za B i C nivo
| ʺ{ʺ {Statement} ʺ}ʺ
*/

StatementList ::= (Statements) StatementList Statement
				|
				(NoStmt) /* epsilon */
				;
				
				  
Statement ::= (MatchedStmt) Matched
		   |
		   (UnmatchedStmt) Unmatched
		   ; 

Unmatched ::= (UnmatchedIf) IF Condition Statement
		 	|
		 	(UnmatchedIfElse) IF Condition Matched ELSE Unmatched
		 	;
		 

Matched ::= (DesignatorStatementStmt) DesignatorStatement:dest SEMI
		   |
		   (ErrorStmt) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
		   |
		   (PrintStmt) PRINT LPAREN Expr NumConstList RPAREN SEMI
		   |
		   (ReadStmt) READ LPAREN Designator RPAREN SEMI
		   |
		   (ReturnExpr) RETURN Expr:t SEMI
		   |
		   (ReturnNoExpr) RETURN SEMI
		   |
		   (ContinueStmt) CONTINUE SEMI
		   |
		   (BreakStmt) BREAK SEMI
		   |
		   (StatementList_List) LBRACE StatementList RBRACE
	     	|
		   (FORStmt_NoDS) FOR LBRACE DesignatorStatementHelper SEMI CondFactHelper SEMI DesignatorStatementHelper RBRACE	   
		   |
		   (MatchedStatement) IF Condition Matched ELSE Matched
		   ;
		   
DesignatorStatementHelper ::= (DesignatorStatementHelper_DS) DesignatorStatement DesignatorStatementList
		   					|
		   					(DesignatorStatementHelper_NoDS) /**/
		   					;
		   					
CondFactHelper ::= (CondFactHelper_One) CondFact
		   					|
		   					(CondFactHelper_none) /**/
		   					;	   					
		   					
NumConstList ::= (NumConstList_ARGS) COMMA NUM_CONST
				|
				(NumConstList_None) /*epsilon*/
				;		
					  
DesignatorStatementList ::= (DesignatorStatementList_List) DesignatorStatementList DesignatorStatement
							|
							(DesignatorStatementList_Single) /* epsilon */
							;

/*Statement_END*/



			  
Expr ::= (AddExpr) Expr:te Addop Term:t
		 |
		 (TermExpr) Term:t
		 ;

Term ::= (Term) Factor:t 
;

Factor ::= (Const) NUMBER
			|
		   (Var) Designator:d
		    |
		   (FuncCall) Designator:func LPAREN ActualPars RPAREN
		   ;

ActualPars ::= (Actuals) ActualParamList 
				| 
			   (NoActuals) /* epsilon */ 
			   ;
			   
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
					|
					(ActualParam) Expr
					;

Designator ::= (Designator) IDENT:name
;

Addop ::= (Addop) PLUS ;
