package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}



terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, EQUAL, RETURN, PLUS, COMMA, PRINT, VOID;
terminal Integer NUMBER;

terminal IF, ELSE;
terminal Integer NUM_CONST;
terminal Character CHAR_CONST;
terminal String BOOL_CONST;
terminal EQUALS, CONST;
terminal LSQUARE, RSQUARE;
terminal CLASS, EXTENDS;
terminal READ, CONTINUE, BREAK, WHILE;
terminal OR, AND, MINUS;
terminal NEW;
terminal DOT, BOOL_EQUAL, BOOL_NOT_EQUAL, GREATER, GREATER_OR_EQUAL, LESS, LESS_OR_EQUAL, DIV, MOD;
terminal INC, DEC;
terminal COLON, ASSIGN, FOREACH;
terminal NAMESP, STATIC, FOR, MUL;
terminal SCOPE;
terminal String IDENT;

nonterminal MethodDeclList;
nonterminal FormalParamList, FormalParamDecl, FormPars, ActualPars, ActualParamList; 
nonterminal StatementList, Statement, Addop;
nonterminal Unmatched, Matched;
 
nonterminal VarDeclList; 

nonterminal ProgDeclList, NamespaceList;
nonterminal ProgDecl, ClassDecl, ConstDecl;
nonterminal ConstList;
nonterminal ExtendsFrom, VarStaticDeclList, StaticInitializerList, StaticInitializer, MethodDeclListBrace, ClassDeclPom;
nonterminal StaticPom;
nonterminal DesignatorStatementHelper, CondFactHelper, DesignatorStatementList, NumConstList, Condition, DesignatorStatement;
nonterminal DesignatorList;
nonterminal CondTerm;
nonterminal Assignop, Relop, Mulop;
nonterminal ActParsList, ConstValue;
nonterminal DesignatorHelper3, Pom;	
nonterminal NamespaceNT, ActParsIE, FormParsDummy;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodTypeName, Designator, DesignatorHelper, DesignatorHelper2, VarDecl, VarlList, VarSingle, ReturnMethod, Type, ConstSingle, TypeDummy, ActPars, MethodParams;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Term, Factor, Expr, FunctionCall, CondFact, ExprActParsChoice; 

/*Program_START*/
/*"program" ident {Namespace} {ConstDecl | VarDecl | ClassDecl } "{" {MethodDecl} "}"*/

Program ::= (Program) PROG ProgName NamespaceList ProgDeclList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;

NamespaceList ::= (NamespaceList_Single) NamespaceList NamespaceNT
					|
					(NamespaceList_Multiple) /* epsilon */
					;

ProgDeclList ::= (ProgDeclListObj) ProgDeclList ProgDecl
				|
				(ProgDeclListNone) /* epsilon */
				;

ProgDecl ::= (ProgConstDescarations) ConstDecl
				| 
				(ProgVarDescarations) VarDecl
				| 
				(ProgClassDescarations) ClassDecl
				;
				
/*Program_END*/	

/*Namespace_START*/
/*namespaceʺ ident ʺ{ʺ {ConstDecl | VarDecl | ClassDecl } ʺ{ʺ {MethodDecl} ʺ}ʺ ʺ}"*/

NamespaceNT ::= (NamespaceProg) NAMESP IDENT LBRACE ProgDeclList LBRACE MethodDeclList RBRACE RBRACE;
				
/*Namespace_END*/	


/*ConstDecl_START*/
/*"const" Type ident"="(numConst | charConst | boolConst) {, ident "=" (numConst |
charConst | boolConst)} ";" */

ConstDecl ::= (ConstDecl) CONST Type ConstList SEMI;

ConstList ::= (SingleConstDecl) ConstSingle
			|
			(MultipleConstDecl) ConstList COMMA ConstSingle
			;
			
ConstSingle ::= (BooleanConst) IDENT:booleanConstName EQUALS BOOL_CONST:booleanConstValue
			|
			(IntegerConst) IDENT:intConstName EQUALS NUM_CONST:intConstValue
			|
			(CharacterConst) IDENT:charConstName EQUALS CHAR_CONST:charConstValue
			;

/*ConstDecl_END*/

/*Type_START*/

Type ::= (Type_ID) IDENT:typeName
		|
		(Type_NS) IDENT SCOPE IDENT:typeName
		;

/*Type_END*/

/*VarDecl_START*/
/*Type ident ["[" "]"] {"," ident ["[" "]"]} ";".*/

VarDecl ::= (VarDecl) TypeDummy VarlList:varName SEMI;
 
TypeDummy ::= (TypeDummy) Type ;

VarlList ::= (SingleVarDecl) VarSingle:name
			|
			(MultipleVarDecl) VarlList COMMA VarSingle
             ;
             
VarSingle ::= (VarDecl_ID) IDENT:varName
              |
              (VarDecl_SQ) IDENT:varName LSQUARE RSQUARE
              ;

/*VarDecl_END*/


/*ClassDecl_START*/
/*ʺclassʺ ident [ʺextendsʺ Type] ʺ{ʺ {ʺstaticʺ VarDecl} {StaticInitializer} {VarDecl} 
[ʺ{ʺ {MethodDecl} ʺ}ʺ] ʺ}ʺ.*/

ClassDecl ::= (ClassDecl_NoMeth) ClassDeclPom RBRACE
				|
				(ClassDecl_Meth) ClassDeclPom LBRACE MethodDeclList RBRACE RBRACE
				;
 
ClassDeclPom ::= (ClassDeclPom_NoMeth) CLASS IDENT ExtendsFrom LBRACE StaticPom VarDeclList;
/*
MethodDeclListBrace ::= (MethodDeclListBrace_Meth) LBRACE MethodDeclList RBRACE;
*/

StaticPom ::= (StaticPom_VarDecl) StaticPom STATIC VarDecl
		|
		(StaticPom_StaticInitializer) StaticPom STATIC StaticInitializer
		|
		(StaticPom_None) /* epsilon */
		;

ExtendsFrom ::= (ExtendsFrom_Meth) EXTENDS Type
                |
                (ExtendsFrom_None) /* epsilon */
                ;
                
StaticInitializerList ::= (StaticInitializerList_Single) /* epsilon */
						|
						(StaticInitializerList_Multiple) StaticInitializerList StaticInitializer
						;

VarStaticDeclList ::= (VarStaticDeclarations) VarStaticDeclList STATIC VarDecl
				|
				(NoStaticVarDecl)/* epsilon */ 
	    	    ; 

VarDeclList ::= (VarDeclarations) VarDeclList VarDecl
				|
				(NoVarDecl)/* epsilon */ 
	    	    ; 
	    	    
/*ClassDecl_END*/

/*StaticInitializer_START*/
/* ʺstaticʺ ʺ{ʺ {Statement} ʺ}ʺ */

StaticInitializer ::= (StaticInitializer) STATIC LBRACE StatementList RBRACE;

/*StaticInitializer_END*/

/*MethodDecl_START*/
/*(Type | "void") ident "(" [FormPars] ")" {VarDecl} "{" {Statement} "}"*/

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon */
				;
				
MethodDecl ::= (MethodDecl) MethodParams VarDeclList LBRACE StatementList RBRACE ;

MethodParams ::= (MethodParams) MethodTypeName LPAREN FormParsDummy FormPars RPAREN;

FormParsDummy ::= (FormParsDummy) /* epsilon */ ; /*Moramo da deklarisemo niz parametara*/

MethodTypeName ::= (MethodTypeName) ReturnMethod IDENT:methName;

ReturnMethod ::= (ReturnMethod_Type) Type
				|
				(ReturnMethod_Void) VOID
				;

/*MethodDecl_END*/

/*FormPars_START*/
/*Type ident ["[" "]"] {"," Type ident ["[" "]"]}*/	
			
FormPars ::= (FormParams) FormalParamList
		  |
		  (NoFormParam) /* epsilon */
		  ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
				|
				(SingleFormalParamDecl) FormalParamDecl
				;
				
FormalParamDecl ::= (FormParDecl_Single) Type IDENT:name
                |
                (FormParDecl_Array) Type IDENT:name LSQUARE RSQUARE
                ;				

/*FormPars_END*/


/*Statement_START*/
/*
DesignatorStatement ʺ;ʺ
| ʺifʺ ʺ(ʺ Condition ʺ)ʺ Statement [ʺelseʺ Statement]
| ʺbreakʺ ʺ;ʺ
| ʺcontinueʺ ʺ;ʺ
| ʺreturnʺ [Expr] ʺ;ʺ
| ʺreadʺ ʺ(ʺ Designator ʺ)ʺ ʺ;ʺ
| ʺprintʺ ʺ(ʺ Expr [ʺ,ʺ numConst] ʺ)ʺ ʺ;ʺ
| ʺforʺ ʺ{ʺ [DesignatorStatement {ʺ,ʺ DesignatorStatement}] ʺ;ʺ [CondFact] ʺ;ʺ [DesignatorStatement {ʺ,ʺ DesignatorStatement}] ʺ}ʺ * za B i C nivo
| ʺ{ʺ {Statement} ʺ}ʺ
*/

StatementList ::= (Statements) StatementList Statement
				|
				(NoStmt) /* epsilon */
				;
				
				  
Statement ::= (MatchedStmt) Matched
		   |
		   (UnmatchedStmt) Unmatched
		   ; 

Unmatched ::= (UnmatchedIf) IF LPAREN Condition RPAREN Statement
		 	|
		 	(UnmatchedIfElse) IF LPAREN Condition RPAREN Matched ELSE Unmatched
		 	;
		 

Matched ::= (DesignatorStatementStmt) DesignatorStatement:dest SEMI
		   |
		   (ErrorStmt) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
		   |
		   (PrintStmt) PRINT LPAREN Expr NumConstList RPAREN SEMI
		   |
		   (ReadStmt) READ LPAREN Designator RPAREN SEMI
		   |
		   (ReturnExpr) RETURN Expr:t SEMI
		   |
		   (ReturnNoExpr) RETURN SEMI
		   |
		   (ContinueStmt) CONTINUE SEMI
		   |
		   (BreakStmt) BREAK SEMI
		   |
		   (StatementList_List) LBRACE StatementList RBRACE
	     	|
		   (FORStmt_NoDS) FOR LPAREN DesignatorStatementHelper SEMI CondFactHelper SEMI DesignatorStatementHelper RPAREN	   
		   |
		   (MatchedStatement) IF LPAREN Condition RPAREN Matched ELSE Matched
		   ;
		   
DesignatorStatementHelper ::= (DesignatorStatementHelper_DS) DesignatorStatement DesignatorStatementList
		   					|
		   					(DesignatorStatementHelper_NoDS) /**/
		   					;
		   					
CondFactHelper ::= (CondFactHelper_One) CondFact
		   					|
		   					(CondFactHelper_none) /**/
		   					;	   					
		   					
NumConstList ::= (NumConstList_ARGS) COMMA NUM_CONST
				|
				(NumConstList_None) /*epsilon*/
				;		
					  
DesignatorStatementList ::= (DesignatorStatementList_List) DesignatorStatementList DesignatorStatement
							|
							(DesignatorStatementList_Single) /* epsilon */
							;

/*Statement_END*/


/*DesignatorStatement_START*/
/*
Designator (Assignop Expr | ʺ(ʺ [ActPars] ʺ)ʺ | ʺ++ʺ | ʺ‐‐ʺ) |
ʺ[ʺ {[Designator] ʺ,ʺ} ʺ*ʺDesignator ʺ]ʺ ʺ=ʺ Designator
*/


DesignatorStatement ::= (Assignment) Designator Assignop Expr
					| 
					(DesignatorStatement_INC) Designator INC
					| 
					(DesignatorStatement_DEC) Designator DEC
					| 
					(DesignatorStatement_FunctionCall) FunctionCall
					| 
					/*(DesignatorStatement_NoActPars) Designator LPAREN RPAREN
					|
                    (DesignatorStatement_Mul) LSQUARE Designator MUL Designator RSQUARE EQUALS Designator               
                   	|
                   	*/                  	
					(DesigatorStatementError) error SEMI:l
					{: parser.report_error("Designator statement error recovering. " + lleft, null); :}
					;

FunctionCall ::= (FunctionCall) Designator LPAREN ActParsIE RPAREN;

ActParsIE ::= (ActParsIE_ActPars) ActPars
               |
               (ActParsIE_None) /* epsilon */
               ;

DesignatorList ::= (DesignatorList_List) Designator COMMA DesignatorList
	              |
	              (DesignatorList_Single) /**/
	              ;
	              					
/*DesignatorStatement_END*/

/*ActPars_START*/
/*Expr {"," Expr}*/

ActPars ::=  (ActPars_Single) Expr
			|
			(ActPars_List) ActPars COMMA Expr
            ;

/*ActPars_END*/

/*Condition_START*/
/*CondTerm {"||" CondTerm}*/

Condition ::= (Condition_List) Condition OR CondTerm
              |
              (Condition_Single) CondTerm
              ;

/*Condition_END*/

/*CondTerm_START*/
/*CondFact {"&&" CondFact}*/

CondTerm ::= (CondTerm_Chain) CondTerm AND CondFact
             |
             (CondTerm_Item) CondFact
             ;

/*CondTerm_END*/
	
/*CondFact_START*/	
/*Expr [Relop Expr]*/

CondFact ::= (CondFact_Expr) Expr
             |
             (CondFact_Relop) Expr Relop Expr
             ;
            
/*CondFact_END*/
	
/*Expr_START*/	
/* ["-"] Term {Addop Term} */

Expr ::= (AddExpr) Expr Addop Term
 		 |
		 (TermExpr_Minus) MINUS Term
		 |
		 (TermExpr) Term
		 ;
 
/*Expr_END*/	
	
/*Term_START*/	
/* Factor {Mulop Factor} */

Term ::= (Term_Factor) Factor
         |
         (Term_Mulop) Term Mulop Factor
         ;
 
/*Term_END*/		  

/*Factor_START*/
/*
Designator ["(" [ActPars] ")"]
| numConst
| charConst
| boolConst
| "new" Type ( "[" Expr "]" | "(" [ActPars] ")" )
| "(" Expr ")".
*/

Factor ::= (VarFactor) Designator:d
           |
           (FuncCall) FunctionCall/*Designator:func LPAREN ActParsList RPAREN*/
           |
           (ConstFactor) ConstValue
           |
           (NewFactor) NEW Type
           |
           (NewFactor_Expr) NEW Type LSQUARE Expr RSQUARE
           |
           (NewFactor_ActPars) NEW Type LPAREN ActParsList RPAREN
           |
           (ParenExprFactor) LPAREN Expr RPAREN
           ;
  /*         
ExprActParsChoice ::= (ExprActParsChoice_Expr) LSQUARE Expr RSQUARE
 						|
 						(ExprActParsChoice_ActPars) LPAREN ActParsList RPAREN
           				;
           				*/
           				
ActParsList ::= (ActParsList_Single) ActPars
				|
				(ActParsList_None) /*epsilon*/
           		;
           		
ConstValue ::= (ConstValue_Num) NUM_CONST
				|
	            (ConstValue_Char) CHAR_CONST
	            |
	            (ConstValue_Bool) BOOL_CONST
	            ;
	            
/*Factor_END*/


/*Designator_START*/
/* [ident ʺ::ʺ] ident {"." ident | "[" Expr "]"}*/


/*
Designator ::= (Designator_Ident) DesignatorHelper DesignatorHelper2;
*/

Designator ::= (DesignatorHelper_Dot) Designator DOT IDENT
				|
				(DesignatorHelper_Expr) Designator LSQUARE Expr RSQUARE
				|
				(Designator_Ident) DesignatorHelper
				;


DesignatorHelper ::= (DesignatorHelper_Scope) IDENT SCOPE IDENT:name
				|
				(DesignatorHelper_None) IDENT:name
                ;
/*
DesignatorHelper2 ::= (DesignatorHelper_Dot) DesignatorHelper2 DOT IDENT
		|
		(DesignatorHelper_Expr) DesignatorHelper2 LSQUARE Expr RSQUARE
		|
		(DesignatorHelper_NoneExpr) 
		;
  
 */
                
/*Designator_END*/


/*Operators_START*/	
		
Assignop ::= EQUALS;	

Relop ::= (Relop_EQ) BOOL_EQUAL
          |
          (Relop_NEQ) BOOL_NOT_EQUAL
          |
          (Relop_GRE) GREATER
          |
          (Relop_GEQ) GREATER_OR_EQUAL
          |
          (Relop_LES) LESS
          |
          (Relop_LEQ) LESS_OR_EQUAL
          ;
		
Addop ::= (Addop_PLUS) PLUS
		  |
	      (Addop_MINUS) MINUS
	      ;
	
Mulop ::= (Mulop_MUL) MUL
          |
          (Mulop_DIV) DIV
          |
          (Mulop_MOD) MOD
          ;

/*Operators_END*/	

